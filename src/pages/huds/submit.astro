---
import Layout from "@layouts/Layout.astro";
import BaseHead from "@components/head/BaseHead.astro";
import PreloadHead from "@components/head/PreloadHead.astro";
import ImportHead from "@components/head/ImportHead.astro";
import MainHead from "@components/head/MainHead.astro";
import Body from "@components/Body.astro";
import Footer from "@components/Footer.astro";
import HudNav from "@components/huds/HudNav.astro";

const schemaReq = await fetch(
  "https://raw.githubusercontent.com/mastercomfig/hud-db/main/utils/hud-data.schema.json"
);

const schema = await schemaReq.json();

const schemaProps = Object.entries(schema.properties);

const requiredProps = new Set(schema.required);

const excludedProps = new Set(["verified"]);

const nameMappings = {
  "traits.os": "OS",
  "social.youtube": "YouTube",
};

function getPropName(prop) {
  if (nameMappings[prop]) {
    return nameMappings[prop];
  }
  return prop
    .split(".")
    .pop()
    .replace(/([A-Z])/g, " $1")
    .replace("_", " ")
    .replace(/^./, (str) => str.toUpperCase());
}

function parseProp(prop, propSchema) {
  if (excludedProps.has(prop)) {
    return [];
  }
  const type = propSchema.type;
  const required = requiredProps.has(prop);
  const description = propSchema.description;
  if (type === "object") {
    const props = Object.entries(propSchema.properties);
    return props.flatMap(([childProp, childPropSchema]) =>
      parseProp(`${prop}.${childProp}`, childPropSchema)
    );
  } else {
    const example = propSchema.examples?.[0];
    return {
      prop,
      name: getPropName(prop),
      description,
      type,
      required,
      example,
      choices: propSchema.items?.enum,
    };
  }
}

const form = schemaProps.flatMap(([prop, propSchema]) =>
  parseProp(prop, propSchema)
);
---

<Layout>
  <head>
    <BaseHead />
    <PreloadHead />
    <ImportHead>
      <script>
        import { Tooltip } from "bootstrap";

        const tooltipTriggerList = document.querySelectorAll(
          '[data-bs-toggle="tooltip"]'
        );
        const tooltipList = [...tooltipTriggerList].map(
          (tooltipTriggerEl) => new Tooltip(tooltipTriggerEl)
        );
      </script>
      <script>
        const formElement = document.getElementById("hud-form");

        function generateFormObject(elements) {
          const formObject = {};
          for (const element of elements) {
            if (!element.value && element.type !== "checkbox") {
              continue;
            }
            let id = element.id.split(".");
            if (id.length === 2) {
              id = id[1];
            } else if (id.length === 1) {
              id = id[0];
            } else {
              console.error("Invalid id split length");
            }
            if (element.type === "checkbox") {
              const checkListSplit = id.split(":");
              if (checkListSplit.length == 2) {
                if (!element.checked) {
                  continue;
                }
                if (!formObject[checkListSplit[0]]) {
                  formObject[checkListSplit[0]] = [];
                }
                formObject[checkListSplit[0]].push(checkListSplit[1]);
              } else if (checkListSplit.length == 1) {
                formObject[id] = element.checked;
              } else {
                console.error("Invalid checklist split length");
              }
            } else if (element.dataset?.array) {
              formObject[id] = element.value.split(",").map((value) => {
                return value.trim();
              });
            } else {
              formObject[id] = element.value;
            }
          }
          return formObject;
        }

        formElement.onsubmit = (e) => {
          e.preventDefault();

          const form = formElement.elements;

          let formObject = {};
          for (const element of form) {
            const subObjectSplit = element.id.split(".");
            if (subObjectSplit.length === 2) {
              if (!formObject[subObjectSplit[0]]) {
                formObject[subObjectSplit[0]] = [];
              }
              formObject[subObjectSplit[0]].push(element);
            } else if (subObjectSplit.length === 1) {
              if (!formObject["__default"]) {
                formObject["__default"] = [];
              }
              formObject["__default"].push(element);
            } else {
              console.error("Invalid subobject split length");
            }
          }

          for (const [name, elements] of Object.entries(formObject)) {
            formObject[name] = generateFormObject(elements);
          }

          for (const [name, formSubObject] of Object.entries(formObject)) {
            if (name === "__default") {
              continue;
            }
            formObject.__default[name] = formSubObject;
          }

          formObject = formObject.__default;

          const id = formObject.id;
          delete formObject.id;

          const json = JSON.stringify(formObject, null, 2);

          const file = new File([json], `${id}.json`, {
            type: "application/octet-stream",
          });

          let url = URL.createObjectURL(file);

          const link = document.createElement("a");
          link.href = url;
          link.download = `${id}.json`;
          document.body.append(link);
          link.dispatchEvent(
            new MouseEvent("click", {
              bubbles: true,
              cancelable: true,
              view: window,
            })
          );
          link.remove();
          setTimeout(() => {
            URL.revokeObjectURL(url);
            url = null;
          }, 120000);
        };
      </script>
    </ImportHead>
    <MainHead
      title="comfig huds | mastercomfig"
      description="comfig huds by mastercomfig is a modern Team Fortress 2 HUD directory. You can find HUDs to customize the look of your menus and in-game UI, and easily install them to your game after finding the one that suits your style and needs."
      url="https://comfig.app/huds"
    />
  </head>
  <Body>
    <HudNav />
    <div class="container">
      <br />
      <h1>How to submit a HUD</h1>
      <p class="lead">
        To submit a HUD to this site, use the <a
          href="https://github.com/mastercomfig/hud-db">hud-db GitHub repo</a
        >. Visit the repo for more instructions and format details.
      </p>
      <p class="lead">
        For those not familiar with JSON, or wanting more assistance, use the
        form on this page to generate a HUD JSON file for you. You can upload
        this file to the GitHub. Let me know if there's anything else I can do
        to make the process easier for you!
      </p>
      <form id="hud-form">
        <div class="mb-3">
          <label for="id" class="form-label">
            HUD ID
            <span class="text-danger">*</span></label
          >
          <input
            type="text"
            class="form-control"
            id="id"
            aria-describedby="id-help"
            placeholder="myhud-name"
            required
          />
          <div id="id-help" class="form-text">
            The ID for your HUD. This should be a unique, all lowercase, dashed
            name.
          </div>
        </div>
        {
          form.map((entry) => {
            return (
              <div class="mb-3">
                <label for={entry.prop} class="form-label">
                  {entry.name}
                  {entry.required && <span class="text-danger">*</span>}
                  {entry.type === "array" && !entry.choices && (
                    <small>(Comma-separated list)</small>
                  )}
                </label>
                <br />
                {entry.type === "string" && (
                  <input
                    type="text"
                    class="form-control"
                    id={entry.prop}
                    aria-describedby={`${entry.prop}-help`}
                    placeholder={entry.example}
                    required={entry.required ? true : undefined}
                  />
                )}
                {entry.type === "boolean" && (
                  <div class="form-check form-switch">
                    <input
                      class="form-check-input"
                      type="checkbox"
                      role="switch"
                      id={entry.prop}
                    />
                  </div>
                )}
                {entry.type === "array" &&
                  entry.choices &&
                  entry.choices.map((choice) => (
                    <div class="form-check form-check-inline">
                      <input
                        class="form-check-input"
                        type="checkbox"
                        id={`${entry.prop}:${choice}`}
                        value="on"
                      />
                      <label
                        class="form-check-label"
                        for={`${entry.prop}:${choice}`}
                      >
                        {choice}
                      </label>
                    </div>
                  ))}
                {entry.type === "array" && !entry.choices && (
                  <input
                    type="text"
                    class="form-control"
                    id={entry.prop}
                    aria-describedby={`${entry.prop}-help`}
                    placeholder={entry.example}
                    required={entry.required ? true : undefined}
                    data-array="true"
                  />
                )}
                <div id={`${entry.prop}-help`} class="form-text">
                  {entry.description}
                </div>
              </div>
            );
          })
        }
        <button type="submit" class="btn btn-primary">Generate</button>
      </form>
      <hr />
    </div>
    <Footer />
  </Body>
</Layout>
